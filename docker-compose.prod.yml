# 生产环境 Docker Compose 配置
# 使用 DockerHub 镜像
services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: shorturl-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: shorturl
      POSTGRES_USER: shorturl
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-shorturl_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - shorturl-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shorturl -d shorturl"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: shorturl-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - shorturl-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_password_2024}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 后端 API 服务
  backend:
    image: ${DOCKER_USERNAME:-your-username}/shorturl-backend:latest
    container_name: shorturl-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://shorturl:${POSTGRES_PASSWORD:-shorturl_password_2024}@postgres:5432/shorturl
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_2024}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_2024_change_this_in_production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3001}
      DEFAULT_DOMAIN: ${DEFAULT_DOMAIN:-localhost:3000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - shorturl-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端界面
  frontend:
    image: ${DOCKER_USERNAME:-your-username}/shorturl-frontend:latest
    container_name: shorturl-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "3001:80"
    networks:
      - shorturl-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: shorturl-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - shorturl-network

# 网络配置
networks:
  shorturl-network:
    driver: bridge

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
