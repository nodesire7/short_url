# 现代化短链接系统 Docker Compose 配置
services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: shortlink-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: shortlink
      POSTGRES_USER: shortlink
      POSTGRES_PASSWORD: shortlink_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - shortlink-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shortlink -d shortlink"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: shortlink-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - shortlink-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "redis_password_2024", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 后端 API 服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # 生产环境可以使用: image: ${DOCKER_USERNAME}/shorturl-backend:latest
    container_name: shortlink-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://shortlink:shortlink_password_2024@postgres:5432/shortlink
      REDIS_URL: redis://:redis_password_2024@redis:6379
      JWT_SECRET: your_super_secret_jwt_key_2024_change_this_in_production
      CORS_ORIGIN: http://localhost:3001
      RATE_LIMIT_MAX: 100
      RATE_LIMIT_WINDOW: 900000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - shortlink-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端界面
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # 生产环境可以使用: image: ${DOCKER_USERNAME}/shorturl-frontend:latest
    container_name: shortlink-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3000
    depends_on:
      - backend
    ports:
      - "3001:80"
    networks:
      - shortlink-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: shortlink-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - shortlink-network

# 网络配置
networks:
  shortlink-network:
    driver: bridge

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
